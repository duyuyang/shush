// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mock_kms is a generated GoMock package.
package mock_kms

import (
	reflect "reflect"

	kms "github.com/aws/aws-sdk-go/service/kms"
	gomock "github.com/golang/mock/gomock"
)

// MockAWSIface is a mock of AWSIface interface
type MockAWSIface struct {
	ctrl     *gomock.Controller
	recorder *MockAWSIfaceMockRecorder
}

// MockAWSIfaceMockRecorder is the mock recorder for MockAWSIface
type MockAWSIfaceMockRecorder struct {
	mock *MockAWSIface
}

// NewMockAWSIface creates a new mock instance
func NewMockAWSIface(ctrl *gomock.Controller) *MockAWSIface {
	mock := &MockAWSIface{ctrl: ctrl}
	mock.recorder = &MockAWSIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAWSIface) EXPECT() *MockAWSIfaceMockRecorder {
	return m.recorder
}

// Encrypt mocks base method
func (m *MockAWSIface) Encrypt(arg0 *kms.EncryptInput) (*kms.EncryptOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", arg0)
	ret0 := CustomMockEncryptOutput()
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt
func (mr *MockAWSIfaceMockRecorder) Encrypt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockAWSIface)(nil).Encrypt), arg0)
}

// Decrypt mocks base method
func (m *MockAWSIface) Decrypt(arg0 *kms.DecryptInput) (*kms.DecryptOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", arg0)
	ret0 := CustomMockDecryptOutput()
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt
func (mr *MockAWSIfaceMockRecorder) Decrypt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockAWSIface)(nil).Decrypt), arg0)
}

func CustomMockEncryptOutput() *kms.EncryptOutput {
	v := "This is a kms secret"
	return &kms.EncryptOutput{
		CiphertextBlob: []byte(v),
	}
}

func CustomMockDecryptOutput() *kms.DecryptOutput {
	v := "This is a plain text"
	return &kms.DecryptOutput{
		Plaintext: []byte(v),
	}
}
