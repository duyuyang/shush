// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go

// Package mock_main is a generated GoMock package.
package mock_provider

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// KMSDecryptEnv mocks base method
func (m *MockProvider) KMSDecryptEnv(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "KMSDecryptEnv", arg0, arg1)
}

// KMSDecryptEnv indicates an expected call of KMSDecryptEnv
func (mr *MockProviderMockRecorder) KMSDecryptEnv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KMSDecryptEnv", reflect.TypeOf((*MockProvider)(nil).KMSDecryptEnv), arg0, arg1)
}

// SSMDecryptEnv mocks base method
func (m *MockProvider) SSMDecryptEnv(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SSMDecryptEnv", arg0, arg1)
}

// SSMDecryptEnv indicates an expected call of SSMDecryptEnv
func (mr *MockProviderMockRecorder) SSMDecryptEnv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSMDecryptEnv", reflect.TypeOf((*MockProvider)(nil).SSMDecryptEnv), arg0, arg1)
}
